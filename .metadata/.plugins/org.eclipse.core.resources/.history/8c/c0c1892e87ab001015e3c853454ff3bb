package com.api.chamadosjdk.controller;

import com.api.chamadosjdk.model.Chamado;
import com.api.chamadosjdk.service.ChamadoService;
import com.api.chamadosjdk.service.CustomUserDetailsService;
import com.api.chamadosjdk.service.JwtService;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(ChamadoController.class)
@Import({
    com.api.chamadosjdk.config.SecurityConfig.class,
    com.api.chamadosjdk.config.JwtAuthenticationFilter.class,
    com.api.chamadosjdk.config.JwtProperties.class
})
@DisplayName("Testes do Controller de Chamados com JWT")
class ChamadoControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ChamadoService chamadoService;

    @MockBean
    private JwtService jwtService;

    @MockBean
    private CustomUserDetailsService customUserDetailsService;

    private ObjectMapper objectMapper;
    private static final String VALID_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9." +
            "eyJzdWIiOiJhZG1pbiIsImlhdCI6MTYxNjIzOTAyMiwiZXhwIjoxNjE2MzI1NDIyfQ." +
            "dummy-signature-for-testing";

    @BeforeEach
    void setUp() {
        objectMapper = new ObjectMapper();
        objectMapper.registerModule(new JavaTimeModule());

        // Simula que o token é válido e pertence ao usuário "admin"
        when(jwtService.extractUsername(VALID_TOKEN)).thenReturn("admin");
        when(jwtService.validateToken(VALID_TOKEN, any(UserDetails.class))).thenReturn(true);

        // Simula carregamento do usuário pelo CustomUserDetailsService
        UserDetails mockUser = org.springframework.security.core.userdetails.User
                .withUsername("admin")
                .password("$2a$10$slYQmyNdGzTn7ZLBXBChFOC9f6kFjAqPhccnP6DxlWXx2lPk1C3G6")
                .authorities("SCOPE_ROLE_USER")
                .build();
        when(customUserDetailsService.loadUserByUsername("admin")).thenReturn(mockUser);
    }

    private org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder withToken(
            org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder builder) {
        return builder.header("Authorization", "Bearer " + VALID_TOKEN);
    }

    @Test
    @DisplayName("Deve retornar lista de chamados com token JWT válido")
    void deveRetornarListaChamadosComToken() throws Exception {
        Chamado chamado1 = new Chamado("Chamado 1", "Descrição 1", "Usuario 1");
        chamado1.setId(1L);
        Chamado chamado2 = new Chamado("Chamado 2", "Descrição 2", "Usuario 2");
        chamado2.setId(2L);

        List<Chamado> chamados = Arrays.asList(chamado1, chamado2);
        when(chamadoService.listarTodos()).thenReturn(chamados);

        mockMvc.perform(withToken(get("/api/chamados")))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[0].id", is(1)))
                .andExpect(jsonPath("$[0].titulo", is("Chamado 1")))
                .andExpect(jsonPath("$[1].id", is(2)))
                .andExpect(jsonPath("$[1].titulo", is("Chamado 2")));

        verify(chamadoService, times(1)).listarTodos();
    }

    @Test
    @DisplayName("Deve criar novo chamado com token JWT")
    void deveCriarNovoChamadoComToken() throws Exception {
        Chamado chamado = new Chamado("Novo Chamado", "Descrição do novo chamado", "Novo Usuario");
        Chamado chamadoSalvo = new Chamado("Novo Chamado", "Descrição do novo chamado", "Novo Usuario");
        chamadoSalvo.setId(10L);
        chamadoSalvo.setDataAbertura(LocalDateTime.now());

        when(chamadoService.abrirChamado(any(Chamado.class))).thenReturn(chamadoSalvo);

        mockMvc.perform(withToken(post("/api/chamados")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(chamado))))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id", is(10)))
                .andExpect(jsonPath("$.titulo", is("Novo Chamado")));

        verify(chamadoService, times(1)).abrirChamado(any(Chamado.class));
    }

    @Test
    @DisplayName("Deve retornar 401 sem token JWT")
    void deveRetornar401SemToken() throws Exception {
        mockMvc.perform(get("/api/chamados"))
                .andExpect(status().isUnauthorized());
    }

    @Test
    @DisplayName("Deve retornar 403 com token inválido")
    void deveRetornar403ComTokenInvalido() throws Exception {
        // Simula falha na validação
        when(jwtService.extractUsername("token-invalido")).thenThrow(new RuntimeException("Invalid token"));

        mockMvc.perform(get("/api/chamados")
                .header("Authorization", "Bearer token-invalido"))
                .andExpect(status().isUnauthorized()); // ou isForbidden(), dependendo da sua config
    }

    @Test
    @DisplayName("Deve buscar chamado por ID com token JWT")
    void deveBuscarChamadoPorIdComToken() throws Exception {
        Long id = 1L;
        Chamado chamado = new Chamado("Chamado Teste", "Descrição Teste", "Test User");
        chamado.setId(id);

        when(chamadoService.buscarPorId(id)).thenReturn(Optional.of(chamado));

        mockMvc.perform(withToken(get("/api/chamados/{id}", id)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id", is(1)))
                .andExpect(jsonPath("$.titulo", is("Chamado Teste")));

        verify(chamadoService, times(1)).buscarPorId(id);
    }

    @Test
    @DisplayName("Deve atualizar status com token JWT")
    void deveAtualizarStatusComToken() throws Exception {
        Long id = 1L;
        Chamado chamadoAtualizado = new Chamado("Chamado Teste", "Descrição", "Usuario");
        chamadoAtualizado.setId(id);

        when(chamadoService.atualizarStatus(eq(id), any())).thenReturn(chamadoAtualizado);

        mockMvc.perform(withToken(put("/api/chamados/{id}/status", id)
                .param("status", "EM_ANDAMENTO")))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id", is(1)));

        verify(chamadoService, times(1)).atualizarStatus(eq(id), any());
    }

    @Test
    @DisplayName("Deve deletar chamado com token JWT")
    void deveDeletarChamadoComToken() throws Exception {
        Long id = 1L;
        when(chamadoService.deletarChamado(id)).thenReturn(true);

        mockMvc.perform(withToken(delete("/api/chamados/{id}", id)))
                .andExpect(status().isNoContent());

        verify(chamadoService, times(1)).deletarChamado(id);
    }

    // Testes de endpoints públicos
    @Test
    @DisplayName("Deve permitir acesso ao login sem token")
    void devePermitirAcessoLoginSemToken() throws Exception {
        mockMvc.perform(post("/api/auth/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"username\":\"admin\",\"password\":\"password\"}"))
                .andExpect(status().isOk());
    }

    @Test
    @DisplayName("Deve permitir acesso ao H2 console sem token")
    void devePermitirAcessoH2ConsoleSemToken() throws Exception {
        mockMvc.perform(get("/h2-console"))
                .andExpect(status().isOk());
    }
}